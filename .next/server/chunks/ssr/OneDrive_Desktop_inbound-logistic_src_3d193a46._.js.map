{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/ai/flows/simulate-inventory-projections.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\r\n\"use server\";\r\n\r\n/**\r\n * @fileOverview Simulates inventory level projections using an AI model with known parameters and ETAs from shipment tracking.\r\n *\r\n * - simulateInventoryProjections - A function that simulates inventory level projections.\r\n * - SimulateInventoryProjectionsInput - The input type for the simulateInventoryProjections function.\r\n * - SimulateInventoryProjectionsOutput - The return type for the simulateInventoryProjections function.\r\n */\r\n\r\nimport { ai } from \"@/ai/genkit\";\r\nimport { z } from \"genkit\";\r\n\r\nconst SimulateInventoryProjectionsInputSchema = z.object({\r\n  initialInventoryLevel: z\r\n    .number()\r\n    .describe(\r\n      \"The initial inventory level at the beginning of the simulation.\"\r\n    ),\r\n  reorderPoint: z\r\n    .number()\r\n    .describe(\r\n      \"The inventory level at which a new order should be placed to replenish stock.\"\r\n    ),\r\n  reorderQuantity: z\r\n    .number()\r\n    .describe(\r\n      \"The quantity of items to order when the reorder point is reached.\"\r\n    ),\r\n  leadTimeDays: z\r\n    .number()\r\n    .describe(\"The lead time in days it takes for a new order to arrive.\"),\r\n  dailyDemandMean: z\r\n    .number()\r\n    .describe(\"The mean of daily demand for the product.\"),\r\n  dailyDemandStdDev: z\r\n    .number()\r\n    .describe(\"The standard deviation of daily demand for the product.\"),\r\n  simulationDays: z\r\n    .number()\r\n    .describe(\"The number of days to simulate inventory levels for.\"),\r\n  shipmentEtaDays: z\r\n    .array(z.number())\r\n    .describe(\r\n      \"Array of estimated time of arrival in days for incoming shipments.\"\r\n    ),\r\n  shipmentQuantities: z\r\n    .array(z.number())\r\n    .describe(\"Array of quantities for corresponding incoming shipments.\"),\r\n});\r\nexport type SimulateInventoryProjectionsInput = z.infer<\r\n  typeof SimulateInventoryProjectionsInputSchema\r\n>;\r\n\r\nconst SimulateInventoryProjectionsOutputSchema = z.object({\r\n  projectedInventoryLevels: z\r\n    .array(z.number())\r\n    .describe(\"The projected inventory levels for each day of the simulation.\"),\r\n  stockoutDays: z\r\n    .number()\r\n    .describe(\r\n      \"The number of days during the simulation where a stockout occurs.\"\r\n    ),\r\n  averageInventoryLevel: z\r\n    .number()\r\n    .describe(\"The average inventory level during the simulation period.\"),\r\n});\r\nexport type SimulateInventoryProjectionsOutput = z.infer<\r\n  typeof SimulateInventoryProjectionsOutputSchema\r\n>;\r\n\r\nexport async function simulateInventoryProjections(\r\n  input: SimulateInventoryProjectionsInput\r\n): Promise<SimulateInventoryProjectionsOutput> {\r\n  return simulateInventoryProjectionsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: \"simulateInventoryProjectionsPrompt\",\r\n  input: { schema: SimulateInventoryProjectionsInputSchema },\r\n  output: { schema: SimulateInventoryProjectionsOutputSchema },\r\n  prompt: `You are a supply chain planning expert. Simulate inventory level projections based on the following parameters:\r\n\r\nInitial Inventory Level: {{{initialInventoryLevel}}}\r\nReorder Point: {{{reorderPoint}}}\r\nReorder Quantity: {{{reorderQuantity}}}\r\nLead Time (Days): {{{leadTimeDays}}}\r\nDaily Demand Mean: {{{dailyDemandMean}}}\r\nDaily Demand Standard Deviation: {{{dailyDemandStdDev}}}\r\nSimulation Days: {{{simulationDays}}}\r\nShipment ETAs (Days): {{{shipmentEtaDays}}}\r\nShipment Quantities: {{{shipmentQuantities}}}\r\n\r\nProject the inventory levels for each day of the simulation, considering demand, reorder point, lead time, and incoming shipments. Calculate the number of days with stockouts and the average inventory level during the simulation.\r\n\r\nEnsure the projectedInventoryLevels array contains the inventory level for each day of the simulation.\r\n\r\nReturn the projected inventory levels, the number of stockout days, and the average inventory level.\r\n\r\nOutput in JSON format.\r\n`,\r\n});\r\n\r\nconst simulateInventoryProjectionsFlow = ai.defineFlow(\r\n  {\r\n    name: \"simulateInventoryProjectionsFlow\",\r\n    inputSchema: SimulateInventoryProjectionsInputSchema,\r\n    outputSchema: SimulateInventoryProjectionsOutputSchema,\r\n  },\r\n  async (input) => {\r\n    const { output } = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;;;IAwEsB,+BAAA,WAAA,GAAA,IAAA,6RAAA,EAAA,8CAAA,kRAAA,EAAA,KAAA,GAAA,wRAAA,EAAA","debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCard.displayName = \"Card\";\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n));\r\nCardHeader.displayName = \"CardHeader\";\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCardTitle.displayName = \"CardTitle\";\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nCardDescription.displayName = \"CardDescription\";\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n));\r\nCardContent.displayName = \"CardContent\";\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n));\r\nCardFooter.displayName = \"CardFooter\";\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardDescription,\r\n  CardContent,\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,iQAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QACC,KAAK;QACL,WAAW,IAAA,uKAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,iQAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QACC,KAAK;QACL,WAAW,IAAA,uKAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,iQAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QACC,KAAK;QACL,WAAW,IAAA,uKAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,iQAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QACC,KAAK;QACL,WAAW,IAAA,uKAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,iQAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QAAI,KAAK;QAAK,WAAW,IAAA,uKAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,iQAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC;QACC,KAAK;QACL,WAAW,IAAA,uKAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/components/ui/label.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n);\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n));\r\nLabel.displayName = LabelPrimitive.Root.displayName;\r\n\r\nexport { Label };\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,qNAAG,EACvB;AAGF,MAAM,sBAAQ,iQAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4RAAC,uNAAmB;QAClB,KAAK;QACL,WAAW,IAAA,uKAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,uNAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/components/ui/form.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport {\r\n  Controller,\r\n  FormProvider,\r\n  useFormContext,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n} from \"react-hook-form\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\nconst Form = FormProvider;\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName;\r\n};\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n);\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n};\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext);\r\n  const itemContext = React.useContext(FormItemContext);\r\n  const { getFieldState, formState } = useFormContext();\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState);\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\");\r\n  }\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  };\r\n};\r\n\r\ntype FormItemContextValue = {\r\n  id: string;\r\n};\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n);\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId();\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  );\r\n});\r\nFormItem.displayName = \"FormItem\";\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField();\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormLabel.displayName = \"FormLabel\";\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } =\r\n    useFormField();\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormControl.displayName = \"FormControl\";\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField();\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nFormDescription.displayName = \"FormDescription\";\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField();\r\n  const body = error ? String(error?.message ?? \"\") : children;\r\n\r\n  if (!body) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  );\r\n});\r\nFormMessage.displayName = \"FormMessage\";\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as RechartsPrimitive from \"recharts\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode;\r\n    icon?: React.ComponentType;\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  );\r\n};\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig;\r\n};\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    config: ChartConfig;\r\n    children: React.ComponentProps<\r\n      typeof RechartsPrimitive.ResponsiveContainer\r\n    >[\"children\"];\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>\r\n          {children}\r\n        </RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  );\r\n});\r\nChartContainer.displayName = \"Chart\";\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(\r\n    ([, config]) => config.theme || config.color\r\n  );\r\n\r\n  if (!colorConfig.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color =\r\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\r\n      itemConfig.color;\r\n    return color ? `  --color-${key}: ${color};` : null;\r\n  })\r\n  .join(\"\\n\")}\r\n}\r\n`\r\n          )\r\n          .join(\"\\n\"),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<\"div\"> & {\r\n      hideLabel?: boolean;\r\n      hideIndicator?: boolean;\r\n      indicator?: \"line\" | \"dot\" | \"dashed\";\r\n      nameKey?: string;\r\n      labelKey?: string;\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = \"dot\",\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart();\r\n\r\n    const tooltipLabel = React.useMemo(() => {\r\n      if (hideLabel || !payload?.length) {\r\n        return null;\r\n      }\r\n\r\n      const [item] = payload;\r\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\r\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n      const value =\r\n        !labelKey && typeof label === \"string\"\r\n          ? config[label as keyof typeof config]?.label || label\r\n          : itemConfig?.label;\r\n\r\n      if (labelFormatter) {\r\n        return (\r\n          <div className={cn(\"font-medium\", labelClassName)}>\r\n            {labelFormatter(value, payload)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      if (!value) {\r\n        return null;\r\n      }\r\n\r\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\r\n    }, [\r\n      label,\r\n      labelFormatter,\r\n      payload,\r\n      hideLabel,\r\n      labelClassName,\r\n      config,\r\n      labelKey,\r\n    ]);\r\n\r\n    if (!active || !payload?.length) {\r\n      return null;\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\r\n          className\r\n        )}\r\n      >\r\n        {!nestLabel ? tooltipLabel : null}\r\n        <div className=\"grid gap-1.5\">\r\n          {payload.map((item, index) => {\r\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n            const indicatorColor = color || item.payload.fill || item.color;\r\n\r\n            return (\r\n              <div\r\n                key={item.dataKey}\r\n                className={cn(\r\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\r\n                  indicator === \"dot\" && \"items-center\"\r\n                )}\r\n              >\r\n                {formatter && item?.value !== undefined && item.name ? (\r\n                  formatter(item.value, item.name, item, index, item.payload)\r\n                ) : (\r\n                  <>\r\n                    {itemConfig?.icon ? (\r\n                      <itemConfig.icon />\r\n                    ) : (\r\n                      !hideIndicator && (\r\n                        <div\r\n                          className={cn(\r\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\r\n                            {\r\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\r\n                              \"w-1\": indicator === \"line\",\r\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\r\n                                indicator === \"dashed\",\r\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\r\n                            }\r\n                          )}\r\n                          style={\r\n                            {\r\n                              \"--color-bg\": indicatorColor,\r\n                              \"--color-border\": indicatorColor,\r\n                            } as React.CSSProperties\r\n                          }\r\n                        />\r\n                      )\r\n                    )}\r\n                    <div\r\n                      className={cn(\r\n                        \"flex flex-1 justify-between leading-none\",\r\n                        nestLabel ? \"items-end\" : \"items-center\"\r\n                      )}\r\n                    >\r\n                      <div className=\"grid gap-1.5\">\r\n                        {nestLabel ? tooltipLabel : null}\r\n                        <span className=\"text-muted-foreground\">\r\n                          {itemConfig?.label || item.name}\r\n                        </span>\r\n                      </div>\r\n                      {item.value && (\r\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                          {item.value.toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nChartTooltipContent.displayName = \"ChartTooltip\";\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> &\r\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\r\n      hideIcon?: boolean;\r\n      nameKey?: string;\r\n    }\r\n>(\r\n  (\r\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart();\r\n\r\n    if (!payload?.length) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex items-center justify-center gap-4\",\r\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\r\n          className\r\n        )}\r\n      >\r\n        {payload.map((item) => {\r\n          const key = `${nameKey || item.dataKey || \"value\"}`;\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n          return (\r\n            <div\r\n              key={item.value}\r\n              className={cn(\r\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\r\n              )}\r\n            >\r\n              {itemConfig?.icon && !hideIcon ? (\r\n                <itemConfig.icon />\r\n              ) : (\r\n                <div\r\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                  style={{\r\n                    backgroundColor: item.color,\r\n                  }}\r\n                />\r\n              )}\r\n              {itemConfig?.label}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n);\r\nChartLegendContent.displayName = \"ChartLegend\";\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(\r\n  config: ChartConfig,\r\n  payload: unknown,\r\n  key: string\r\n) {\r\n  if (typeof payload !== \"object\" || payload === null) {\r\n    return undefined;\r\n  }\r\n\r\n  const payloadPayload =\r\n    \"payload\" in payload &&\r\n    typeof payload.payload === \"object\" &&\r\n    payload.payload !== null\r\n      ? payload.payload\r\n      : undefined;\r\n\r\n  let configLabelKey: string = key;\r\n\r\n  if (\r\n    key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"\r\n  ) {\r\n    configLabelKey = payload[key as keyof typeof payload] as string;\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\r\n  ) {\r\n    configLabelKey = payloadPayload[\r\n      key as keyof typeof payloadPayload\r\n    ] as string;\r\n  }\r\n\r\n  return configLabelKey in config\r\n    ? config[configLabelKey]\r\n    : config[key as keyof typeof config];\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nilay/OneDrive/Desktop/inbound-logistic/src/components/inventory/inventory-simulation.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport {\r\n  simulateInventoryProjections,\r\n  type SimulateInventoryProjectionsOutput,\r\n} from \"@/ai/flows/simulate-inventory-projections\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Loader2, Warehouse } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport {\r\n  Line,\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n} from \"@/components/ui/chart\";\r\n\r\nconst formSchema = z.object({\r\n  initialInventoryLevel: z.coerce.number().min(0, \"Must be positive\"),\r\n  reorderPoint: z.coerce.number().min(0, \"Must be positive\"),\r\n  reorderQuantity: z.coerce.number().min(1, \"Must be at least 1\"),\r\n  leadTimeDays: z.coerce.number().min(0, \"Must be positive\"),\r\n  dailyDemandMean: z.coerce.number().min(0, \"Must be positive\"),\r\n  dailyDemandStdDev: z.coerce.number().min(0, \"Must be positive\"),\r\n  simulationDays: z.coerce\r\n    .number()\r\n    .min(1, \"Must be at least 1\")\r\n    .max(365, \"Max 365 days\"),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst chartConfig = {\r\n  inventory: {\r\n    label: \"Inventory\",\r\n    color: \"hsl(var(--primary))\",\r\n  },\r\n};\r\n\r\nexport default function InventorySimulation() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [result, setResult] =\r\n    useState<SimulateInventoryProjectionsOutput | null>(null);\r\n  const { toast } = useToast();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      initialInventoryLevel: 1000,\r\n      reorderPoint: 200,\r\n      reorderQuantity: 500,\r\n      leadTimeDays: 14,\r\n      dailyDemandMean: 50,\r\n      dailyDemandStdDev: 15,\r\n      simulationDays: 90,\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: FormValues) {\r\n    setIsLoading(true);\r\n    setResult(null);\r\n    try {\r\n      const simulationInput = {\r\n        ...values,\r\n        shipmentEtaDays: [5, 20], // Mock incoming shipments\r\n        shipmentQuantities: [500, 500],\r\n      };\r\n      const prediction = await simulateInventoryProjections(simulationInput);\r\n      setResult(prediction);\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Error\",\r\n        description: \"Failed to run simulation. Please try again.\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  const chartData = result?.projectedInventoryLevels.map((level, day) => ({\r\n    day: `Day ${day + 1}`,\r\n    inventory: level,\r\n  }));\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\r\n      <div className=\"lg:col-span-1\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Warehouse className=\"h-5 w-5 text-primary\" />\r\n                Inventory Simulation\r\n              </div>\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Project inventory levels based on your parameters.\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Form {...form}>\r\n              <form\r\n                onSubmit={form.handleSubmit(onSubmit)}\r\n                className=\"space-y-4\"\r\n              >\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  {Object.keys(form.getValues()).map((key) => {\r\n                    const fieldName = key as keyof FormValues;\r\n                    return (\r\n                      <FormField\r\n                        key={fieldName}\r\n                        control={form.control}\r\n                        name={fieldName}\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel className=\"capitalize text-xs\">\r\n                              {fieldName.replace(/([A-Z])/g, \" $1\")}\r\n                            </FormLabel>\r\n                            <FormControl>\r\n                              <Input type=\"number\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n                <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\r\n                  {isLoading && (\r\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  )}\r\n                  Run Simulation\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      <div className=\"lg:col-span-2\">\r\n        <Card className=\"min-h-full\">\r\n          <CardHeader>\r\n            <CardTitle>Simulation Results</CardTitle>\r\n            <CardDescription>\r\n              {result\r\n                ? \"Projected inventory levels over time.\"\r\n                : \"Run a simulation to see results.\"}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {isLoading && (\r\n              <div className=\"flex items-center justify-center h-96\">\r\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n              </div>\r\n            )}\r\n            {result && chartData && (\r\n              <div>\r\n                <div className=\"grid grid-cols-3 gap-4 mb-6 text-center\">\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Avg. Inventory\r\n                    </p>\r\n                    <p className=\"text-2xl font-bold\">\r\n                      {result.averageInventoryLevel.toFixed(0)}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Stockout Days\r\n                    </p>\r\n                    <p className=\"text-2xl font-bold text-destructive\">\r\n                      {result.stockoutDays}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Simulation Period\r\n                    </p>\r\n                    <p className=\"text-2xl font-bold\">\r\n                      {form.getValues().simulationDays} Days\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <ChartContainer config={chartConfig} className=\"h-80 w-full\">\r\n                  <ResponsiveContainer>\r\n                    <LineChart\r\n                      data={chartData}\r\n                      margin={{ top: 5, right: 20, left: -10, bottom: 5 }}\r\n                    >\r\n                      <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n                      <XAxis\r\n                        dataKey=\"day\"\r\n                        tickLine={false}\r\n                        axisLine={false}\r\n                        tickMargin={8}\r\n                        tick={{ fontSize: 12 }}\r\n                      />\r\n                      <YAxis tickLine={false} axisLine={false} />\r\n                      <Tooltip content={<ChartTooltipContent />} />\r\n                      <Line\r\n                        type=\"monotone\"\r\n                        dataKey=\"inventory\"\r\n                        stroke=\"hsl(var(--primary))\"\r\n                        strokeWidth={2}\r\n                        dot={false}\r\n                      />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                </ChartContainer>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}