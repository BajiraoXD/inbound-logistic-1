// This is an autogenerated file from Firebase Studio.
"use server";

/**
 * @fileOverview Simulates inventory level projections using an AI model with known parameters and ETAs from shipment tracking.
 *
 * - simulateInventoryProjections - A function that simulates inventory level projections.
 * - SimulateInventoryProjectionsInput - The input type for the simulateInventoryProjections function.
 * - SimulateInventoryProjectionsOutput - The return type for the simulateInventoryProjections function.
 */

import { ai } from "@/ai/genkit";
import { z } from "genkit";

const SimulateInventoryProjectionsInputSchema = z.object({
  initialInventoryLevel: z
    .number()
    .describe(
      "The initial inventory level at the beginning of the simulation."
    ),
  reorderPoint: z
    .number()
    .describe(
      "The inventory level at which a new order should be placed to replenish stock."
    ),
  reorderQuantity: z
    .number()
    .describe(
      "The quantity of items to order when the reorder point is reached."
    ),
  leadTimeDays: z
    .number()
    .describe("The lead time in days it takes for a new order to arrive."),
  dailyDemandMean: z
    .number()
    .describe("The mean of daily demand for the product."),
  dailyDemandStdDev: z
    .number()
    .describe("The standard deviation of daily demand for the product."),
  simulationDays: z
    .number()
    .describe("The number of days to simulate inventory levels for."),
  shipmentEtaDays: z
    .array(z.number())
    .describe(
      "Array of estimated time of arrival in days for incoming shipments."
    ),
  shipmentQuantities: z
    .array(z.number())
    .describe("Array of quantities for corresponding incoming shipments."),
});
export type SimulateInventoryProjectionsInput = z.infer<
  typeof SimulateInventoryProjectionsInputSchema
>;

const SimulateInventoryProjectionsOutputSchema = z.object({
  projectedInventoryLevels: z
    .array(z.number())
    .describe("The projected inventory levels for each day of the simulation."),
  stockoutDays: z
    .number()
    .describe(
      "The number of days during the simulation where a stockout occurs."
    ),
  averageInventoryLevel: z
    .number()
    .describe("The average inventory level during the simulation period."),
});
export type SimulateInventoryProjectionsOutput = z.infer<
  typeof SimulateInventoryProjectionsOutputSchema
>;

export async function simulateInventoryProjections(
  input: SimulateInventoryProjectionsInput
): Promise<SimulateInventoryProjectionsOutput> {
  return simulateInventoryProjectionsFlow(input);
}

const prompt = ai.definePrompt({
  name: "simulateInventoryProjectionsPrompt",
  input: { schema: SimulateInventoryProjectionsInputSchema },
  output: { schema: SimulateInventoryProjectionsOutputSchema },
  prompt: `You are a supply chain planning expert. Simulate inventory level projections based on the following parameters:

Initial Inventory Level: {{{initialInventoryLevel}}}
Reorder Point: {{{reorderPoint}}}
Reorder Quantity: {{{reorderQuantity}}}
Lead Time (Days): {{{leadTimeDays}}}
Daily Demand Mean: {{{dailyDemandMean}}}
Daily Demand Standard Deviation: {{{dailyDemandStdDev}}}
Simulation Days: {{{simulationDays}}}
Shipment ETAs (Days): {{{shipmentEtaDays}}}
Shipment Quantities: {{{shipmentQuantities}}}

Project the inventory levels for each day of the simulation, considering demand, reorder point, lead time, and incoming shipments. Calculate the number of days with stockouts and the average inventory level during the simulation.

Ensure the projectedInventoryLevels array contains the inventory level for each day of the simulation.

Return the projected inventory levels, the number of stockout days, and the average inventory level.

Output in JSON format.
`,
});

const simulateInventoryProjectionsFlow = ai.defineFlow(
  {
    name: "simulateInventoryProjectionsFlow",
    inputSchema: SimulateInventoryProjectionsInputSchema,
    outputSchema: SimulateInventoryProjectionsOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
